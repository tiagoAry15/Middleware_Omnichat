name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main  # ajuste para o seu branch de produção

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
  TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}
  SDK_TYPE: ${{ secrets.SDK_TYPE }}
  SDK_PROJECT_ID: ${{ secrets.SDK_PROJECT_ID }}
  SDK_PRIVATE_KEY_ID: ${{ secrets.SDK_PRIVATE_KEY_ID }}
  SDK_PRIVATE_KEY: ${{ secrets.SDK_PRIVATE_KEY }}
  SDK_CLIENT_EMAIL: ${{ secrets.SDK_CLIENT_EMAIL }}
  SDK_CLIENT_ID: ${{ secrets.SDK_CLIENT_ID }}
  SDK_CLIENT_X509_CERT_URL: ${{ secrets.SDK_CLIENT_X509_CERT_URL }}
  SDK_UNIVERSE_DOMAIN: ${{ secrets.SDK_UNIVERSE_DOMAIN }}
  FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
  INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
  INSTAGRAM_EMAIL: ${{ secrets.INSTAGRAM_EMAIL }}
  INSTAGRAM_PASSWORD: ${{ secrets.INSTAGRAM_PASSWORD }}
  IMAGE_NAME: aiohttp_omnichat

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Print Credentials for Debugging except
      run: |
        echo "$GCP_SA_KEY" | jq '. | del(.private_key)'

    - name: Extract client_email field
      id: extract_field
      run: echo "CLIENT_EMAIL=$(echo $GCP_SA_KEY | jq -r '.client_email')" >> $GITHUB_ENV
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}


    # Adicionando a autenticação com Workload Identity Provider
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        service_account: ${{ env.CLIENT_EMAIL }}



    - name: Build Docker Image
      run: | 
        docker build -t ${{ env.IMAGE_NAME }} .
        docker tag ${{ env.IMAGE_NAME }} gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}

    - name: Push Docker Image to Google Container Registry
      run: |
        gcloud auth configure-docker
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}

    - name: Set env vars for Cloud Run deployment
      run: |# Create an array with all the environment variable assignments
        ENV_VARS_ARRAY=(
          "TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}"
          "TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}"
          "TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}"
          "SDK_TYPE=${SDK_TYPE}"
          "SDK_PROJECT_ID=${SDK_PROJECT_ID}"
          "SDK_PRIVATE_KEY=${SDK_PRIVATE_KEY}"
          "SDK_PRIVATE_KEY_ID=${SDK_PRIVATE_KEY_ID}"
          "SDK_CLIENT_EMAIL=${SDK_CLIENT_EMAIL}"
          "SDK_CLIENT_ID=${SDK_CLIENT_ID}"
          "SDK_CLIENT_X509_CERT_URL=${SDK_CLIENT_X509_CERT_URL}"
          "SDK_UNIVERSE_DOMAIN=${SDK_UNIVERSE_DOMAIN}"
          "FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL}"
          "INSTAGRAM_ACCESS_TOKEN=${INSTAGRAM_ACCESS_TOKEN}"
          "INSTAGRAM_EMAIL=${INSTAGRAM_EMAIL}"
          "INSTAGRAM_PASSWORD=${INSTAGRAM_PASSWORD}"
        
        )

         # Join the array elements into a comma-separated string
        UPDATE_ENV_VARS_ARG=$(IFS=,; echo "${ENV_VARS_ARRAY[*]}")

        echo "UPDATE_ENV_VARS_ARG contents:"
        echo "$UPDATE_ENV_VARS_ARG" # Print the contents for inspection
        echo "UPDATE_ENV_VARS_ARG=$UPDATE_ENV_VARS_ARG" >> $GITHUB_ENV

    - name: config VPC serverless Access connector
      run: |
        gcloud compute networks vpc-access connectors create serverless-connector \
          --network default \
          --region us-central1 \
          --range "10.8.0.0/28"

    - name: create service account identity with no cache yet
      run: |
             gcloud iam service-accounts create chat-identity
             gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
             --member=serviceAccount:chat-identity@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
             --role=roles/serviceusage.serviceUsageConsumer

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.IMAGE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }} \
          --vpc-connector serverless-connector \
          --platform managed \
          --allow-unauthenticated \
          --timeout 3600 \
          --service-account chat-identity \
          --region us-central1 \
          --set-env-vars "$UPDATE_ENV_VARS_ARG"
